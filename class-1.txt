-->
pure and impure function kii ?
-->
incriment:(state,action)=>{
            state.count += action.payload
         },
         aii function ta kivabe pure function?
ans:ЁЯФ╣ Pure function ржПрж░ рж╢рж░рзНржд

ржПржХржЗ input ржжрж┐рж▓рзЗ рж╕рж░рзНржмржжрж╛ ржПржХржЗ output ржжрж┐рждрзЗ рж╣ржмрзЗред

ржмрж╛ржЗрж░рзЗрж░ state ржмрж╛ variable ржкрж░рж┐ржмрж░рзНрждржи ржХрж░рж╛ ржпрж╛ржмрзЗ ржирж╛ (side effects ржирзЗржЗ)ред

ЁЯФ╣ рждрзЛржорж╛рж░ function
increment: (state, action) => {
    state.count += action.payload
}


ржПржЯрж╛ Redux Toolkit slice reducer functionред

RTK ржПрж░ createSlice ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛рж░ рж╕ржорзЯ, reducers immer library ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗред

ржмрж╛рж╕рзНрждржмрзЗ рждрзБржорж┐ ржпрж╛ рж▓рж┐ржЦржЫрзЛ, рждрж╛ immer ржПрж░ ржорж╛ржзрзНржпржорзЗ immutable update рж╣рж┐рж╕рзЗржмрзЗ handle рж╣рзЯред

ЁЯФ╣ ржмрж┐рж╢рзНрж▓рзЗрж╖ржг

state.count += action.payload state ржкрж░рж┐ржмрж░рзНрждржи ржХрж░ржЫрзЗ, рждрж╛ржЗ technically ржПржЯрж┐ impure codeред

рждржмрзЗ Redux Toolkit + immer ржПрж░ context ржП, ржПржЯрж┐ safe ржПржмржВ conceptual ржнрж╛ржмрзЗ тАЬpureтАЭ ржоржирзЗ ржХрж░рж╛ рж╣рзЯ, ржХрж╛рж░ржг:

ржмрж╛ржЗрж░рзЗрж░ global variable ржкрж░рж┐ржмрж░рзНрждржи рж╣ржЪрзНржЫрзЗ ржирж╛

Immer internally ржПржХржЯрж╛ ржирждрзБржи state object рждрзИрж░рж┐ ржХрж░ржЫрзЗ

ржпрзЗ рждрзБржорж┐ ржмрж▓рзЗржЫрзЛ тАЬundefined return рж╣ржЪрзНржЫрзЗтАЭ тЖТ рждрж╛ ржЧрзБрж░рзБрждрзНржмржкрзВрж░рзНржг ржирзЯред Redux reducers state update ржХрж░рзЗ return ржХрж░рж╛ ржмрж╛ржзрзНржпрждрж╛ржорзВрж▓ржХ ржирзЯ, Immer internally state handle ржХрж░рзЗред

ЁЯФ╣ рж╕рж╛рж░рж╛ржВрж╢

Pure function тЙа return value ржжрж┐рждрзЗ рж╣ржмрзЗред

Real Redux context ржП, рждрзБржорж┐ state mutate ржХрж░рж▓рзЗржУ Immer-ржПрж░ ржХрж╛рж░ржгрзЗ slice reducers functional/pure style ржПрж░ рж╣рж┐рж╕рзЗржмрзЗ ржХрж╛ржЬ ржХрж░рзЗред

ржХрж┐ржирзНрждрзБ technically, ржпржжрж┐ рждрзБржорж┐ рж╕рж░рж╛рж╕рж░рж┐ ржмрж╛ржЗрж░рзЗрж░ variable ржкрж░рж┐ржмрж░рзНрждржи ржХрж░рзЛ, рждржЦржи рж╕рзЗржЯрж╛ impureред

Immer er bishoi ta kii ?
ans: рзз. рж╕ржорж╕рзНржпрж╛ ржпрж╛ Immer рж╕ржорж╛ржзрж╛ржи ржХрж░рзЗ

Redux ржП state immutable рж╣рждрзЗ рж╣ржмрзЗред

ржорж╛ржирзЗ: рждрзБржорж┐ рж╕рж░рж╛рж╕рж░рж┐ state ржкрж░рж┐ржмрж░рзНрждржи ржХрж░рждрзЗ ржкрж╛рж░ржмрзЗ ржирж╛ред

ржЙржжрж╛рж╣рж░ржг:

let state = { count: 0 };
function increment(state) {
  state.count += 1; // тЭМ ржПржЯрж╛ рж╕рж░рж╛рж╕рж░рж┐ ржкрж░рж┐ржмрж░рзНрждржи ржХрж░ржЫрзЗ тЖТ impure
}


ржпржжрж┐ рждрзБржорж┐ рж╕рж░рж╛рж╕рж░рж┐ ржкрж░рж┐ржмрж░рзНрждржи ржХрж░рзЛ, Redux ржПрж░ ржирж┐рзЯржо ржнржЩрзНржЧ рж╣ржмрзЗред

ЁЯФ╣ рзи. Immer ржХрзА?

Immer рж╣рж▓рзЛ ржПржХржЯрж┐ library, ржпрж╛ рждрзЛржорж╛рж░ mutable-looking code ржХрзЗ internally immutable ржмрж╛ржирж┐рзЯрзЗ ржжрзЗрзЯред

рждрзБржорж┐ ржоржирзЗ ржХрж░рзЛ рждрзБржорж┐ state ржкрж░рж┐ржмрж░рзНрждржи ржХрж░ржЫрзЛ,

ржХрж┐ржирзНрждрзБ Immer internally ржирждрзБржи state copy рждрзИрж░рж┐ ржХрж░рзЗ, original state ржарж┐ржХ ржерж╛ржХрзЗред

ЁЯТб рж╕рж╣ржЬ analogy:

рждрзБржорж┐ ржПржХржЯрж┐ ржХрж╛ржЧржЬрзЗ ржЫржмрж┐ ржЖржБржХржЫрзЛ (original state)ред

Immer secretly ржПржХржЯрж╛ copy ржХрж╛ржЧржЬ ржмрж╛ржирж╛рзЯред

рждрзБржорж┐ ржпрзЗржЯрж╛ modify ржХрж░ржЫрзЛ, рждрж╛ copy-рждрзЗ рж╣ржЪрзНржЫрзЗред

ржорзВрж▓ ржХрж╛ржЧржЬ (original state) ржарж┐ржХ ржерж╛ржХрзЗред

ЁЯФ╣ рзй. ржЙржжрж╛рж╣рж░ржг
import { createSlice } from "@reduxjs/toolkit";

const counterSlice = createSlice({
  name: "counter",
  initialState: { count: 0 },
  reducers: {
    increment: (state) => {
      state.count += 1; // ржПржЯрж╛ mutable ржжрзЗржЦрж╛ржЪрзНржЫрзЗ
    }
  }
})




ржХрж┐ рж╣ржЪрзНржЫрзЗ internally:

Immer ржжрзЗржЦрзЗ рждрзБржорж┐ state.count += 1 рж▓рж┐ржЦрзЗржЫрзЛ

Immer internally ржирждрзБржи state рждрзИрж░рж┐ ржХрж░рзЗ

Redux store-ржП ржирждрзБржи state replace рж╣рзЯ, original state safe ржерж╛ржХрзЗ

ЁЯФ╣ рзк. ржХрзЗржи ржПржЯрж╛ ржЧрзБрж░рзБрждрзНржмржкрзВрж░рзНржг

рждрзБржорж┐ рж╕рж╣ржЬрзЗ mutable-looking code рж▓рж┐ржЦрждрзЗ ржкрж╛рж░рзЛ

рждржмрзЗ state safe ржерж╛ржХрзЗ тЖТ immutable

Reducers clean, simple, ржПржмржВ bug-free рж╣рзЯ

ЁЯТб рж╕ржВржХрзНрж╖рзЗржкрзЗ:

Immer = magic library ржпрзЗржЯрж╛ mutable code ржХрзЗ immutable ржмрж╛ржирж╛рзЯред

рждрзБржорж┐ mutable рж▓рж┐ржЦрзЛ тЖТ Immer internally immutable handle ржХрж░рзЗред

ржПржЯрж╛ржЗ Redux Toolkit ржХрзЗ ржПржд рж╕рж╣ржЬ ржПржмржВ safe ржХрж░рзЗ рждрзЛрж▓рзЗред